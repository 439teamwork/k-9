apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply from: '../gradle/plugins/checkstyle-android.gradle'
//apply from: '../gradle/plugins/findbugs-android.gradle'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'pmd'

repositories {
    jcenter()
}

ext {
    supportLibraryVersion = '23.1.1'
}

//noinspection GroovyAssignabilityCheck
configurations.all {
    resolutionStrategy {
        force "com.android.support:support-annotations:${project.supportLibraryVersion}"
    }
}

dependencies {
    compile project(':k9mail-library')
    compile project(':plugins:Android-PullToRefresh:library')
    compile project(':plugins:HoloColorPicker')
    compile 'commons-io:commons-io:2.4'
    compile "com.android.support:support-v4:${project.supportLibraryVersion}"
    compile 'net.sourceforge.htmlcleaner:htmlcleaner:2.16'
    compile 'de.cketti.library.changelog:ckchangelog:1.2.1'
    compile 'com.github.bumptech.glide:glide:3.6.1'
    compile 'org.sufficientlysecure:openpgp-api:8.0'
    compile 'com.splitwise:tokenautocomplete:2.0.2'

    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'

    testCompile 'org.robolectric:robolectric:3.0'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'


    androidTestCompile 'com.android.support.test:runner:0.+'
    androidTestCompile 'com.android.support.test:rules:0.+'
    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.+'
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        applicationId "com.fsck.k9"
        testApplicationId "com.fsck.k9.tests"

        versionCode 23060
        versionName '5.106'

        minSdkVersion 18
        targetSdkVersion 22

        generatedDensities = ['mdpi', 'hdpi', 'xhdpi']

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            if (project.hasProperty('storeFile')) {
                signingConfig signingConfigs.release
            }

            buildConfigField "boolean", "DEVELOPER_MODE", "false"
        }

        debug {
            applicationIdSuffix ".debug"
            testCoverageEnabled = true //rootProject.testCoverage

            buildConfigField "boolean", "DEVELOPER_MODE", "true"
        }
    }

    // Do not abort build if lint finds errors
    lintOptions {
        abortOnError false
        lintConfig file("$rootProject.projectDir/config/lint/lint.xml")
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'LICENSE.txt'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

task jacocoTestReport(type:JacocoReport) {
    logger.warn("jacoco test report")
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    // exclude auto-generated classes and tests
    def fileFilter = ['**/R.class', '**/R$*.class',
                      '**/BuildConfig.*', '**/Manifest*.*',
                      'android/**/*.*']
    def debugTree = fileTree(dir:
            "${project.buildDir}/intermediates/classes/debug",
            excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    additionalSourceDirs = files([
            "${buildDir}/generated/source/buildConfig/debug",
            "${buildDir}/generated/source/r/debug"
    ])
    executionData = fileTree(dir: project.projectDir, includes:
            ['**/*.exec', '**/*.ec'])

    reports {
        xml.enabled = true
        xml.destination = "${buildDir}/jacocoTestReport.xml"
        csv.enabled = false
        html.enabled = true
        html.destination = "${buildDir}/reports/jacoco"
    }
}

task customFindbugs(type: FindBugs) {
    logger.warn("findbugs custom")
    ignoreFailures = true
    effort = "default"
    reportLevel = "medium"

    excludeFilter = file("$rootProject.rootDir/config/findbugs/exclude.xml")

    classes = fileTree('build/classes/debug/')
    source = fileTree('src/main/java')

    include '**/*.java'
    exclude '**/gen/**'

    classpath = files()

    reports {
        xml.enabled = false
        html.enabled = true
        xml {
            destination "$project.buildDir/reports/findbugs/findbugs.xml"
        }
        html {
            destination "$project.buildDir/reports/findbugs/findbugs.html"
        }
    }
}

task customPMD(type: Pmd) {
    logger.warn("PMD custom")
    ruleSetFiles = files("${project.rootDir}/config/quality/pmd/pmd-ruleset.xml")
    ignoreFailures = false
    ruleSets = []

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        html.enabled = true
        xml {
            destination "$project.buildDir/reports/pmd/pmd.xml"
        }
        html {
            destination "$project.buildDir/reports/pmd/pmd.html"
        }
    }
}

// add CPD to check
check << {
    logger.warn("CPD")
    File outDir = new File('build/reports/pmd/')
    outDir.mkdirs()
    ant.taskdef(name: 'cpd', classname: 'net.sourceforge.pmd.cpd.CPDTask',
            classpath: configurations.pmd.asPath)
    ant.cpd(minimumTokenCount: '100', format: 'xml',
            outputFile: new File(outDir , 'cpd.xml')) {
        fileset(dir: "src/main/java") {
            include(name: '**/*.java')
        }
    }
}

if (project.hasProperty('keyAlias')) {
    android.signingConfigs.release.keyAlias = keyAlias
}
if (project.hasProperty('keyPassword')) {
    android.signingConfigs.release.keyPassword = keyPassword
}
if (project.hasProperty('storeFile')) {
    android.signingConfigs.release.storeFile = file(storeFile)
}
if (project.hasProperty('storePassword')) {
    android.signingConfigs.release.storePassword = storePassword
}
